// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2015 19:51:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Master
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Master_vlg_sample_tst(
	AUD_ADCDAT,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACLRCK,
	CLK_50MHz,
	I2C_SDAT,
	KEY,
	PS2_CLK,
	PS2_DAT,
	SW,
	TD_CLK27,
	resetn,
	sampler_tx
);
input  AUD_ADCDAT;
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACLRCK;
input  CLK_50MHz;
input  I2C_SDAT;
input [2:0] KEY;
input  PS2_CLK;
input  PS2_DAT;
input [17:0] SW;
input  TD_CLK27;
input  resetn;
output sampler_tx;

reg sample;
time current_time;
always @(AUD_ADCDAT or AUD_ADCLRCK or AUD_BCLK or AUD_DACLRCK or CLK_50MHz or I2C_SDAT or KEY or PS2_CLK or PS2_DAT or SW or TD_CLK27 or resetn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Master_vlg_check_tst (
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACDAT,
	AUD_DACLRCK,
	AUD_XCK,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	I2C_SCLK,
	I2C_SDAT,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,
	LEDG,
	LEDR,
	sampler_rx
);
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACDAT;
input  AUD_DACLRCK;
input  AUD_XCK;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input  I2C_SCLK;
input  I2C_SDAT;
input [7:0] LCD_DATA;
input  LCD_EN;
input  LCD_ON;
input  LCD_RS;
input  LCD_RW;
input [8:0] LEDG;
input [17:0] LEDR;
input sampler_rx;

reg  AUD_ADCLRCK_expected;
reg  AUD_BCLK_expected;
reg  AUD_DACDAT_expected;
reg  AUD_DACLRCK_expected;
reg  AUD_XCK_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;
reg  I2C_SCLK_expected;
reg  I2C_SDAT_expected;
reg [7:0] LCD_DATA_expected;
reg  LCD_EN_expected;
reg  LCD_ON_expected;
reg  LCD_RS_expected;
reg  LCD_RW_expected;
reg [8:0] LEDG_expected;
reg [17:0] LEDR_expected;

reg  AUD_ADCLRCK_prev;
reg  AUD_BCLK_prev;
reg  AUD_DACDAT_prev;
reg  AUD_DACLRCK_prev;
reg  AUD_XCK_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;
reg  I2C_SCLK_prev;
reg  I2C_SDAT_prev;
reg [7:0] LCD_DATA_prev;
reg  LCD_EN_prev;
reg  LCD_ON_prev;
reg  LCD_RS_prev;
reg  LCD_RW_prev;
reg [8:0] LEDG_prev;
reg [17:0] LEDR_prev;

reg [7:0] LCD_DATA_expected_prev;
reg  LCD_EN_expected_prev;
reg  LCD_ON_expected_prev;
reg  LCD_RS_expected_prev;
reg  LCD_RW_expected_prev;

reg [7:0] last_LCD_DATA_exp;
reg  last_LCD_EN_exp;
reg  last_LCD_ON_exp;
reg  last_LCD_RS_exp;
reg  last_LCD_RW_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	AUD_ADCLRCK_prev = AUD_ADCLRCK;
	AUD_BCLK_prev = AUD_BCLK;
	AUD_DACDAT_prev = AUD_DACDAT;
	AUD_DACLRCK_prev = AUD_DACLRCK;
	AUD_XCK_prev = AUD_XCK;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	I2C_SCLK_prev = I2C_SCLK;
	I2C_SDAT_prev = I2C_SDAT;
	LCD_DATA_prev = LCD_DATA;
	LCD_EN_prev = LCD_EN;
	LCD_ON_prev = LCD_ON;
	LCD_RS_prev = LCD_RS;
	LCD_RW_prev = LCD_RW;
	LEDG_prev = LEDG;
	LEDR_prev = LEDR;
end

// update expected /o prevs

always @(trigger)
begin
	LCD_DATA_expected_prev = LCD_DATA_expected;
	LCD_EN_expected_prev = LCD_EN_expected;
	LCD_ON_expected_prev = LCD_ON_expected;
	LCD_RS_expected_prev = LCD_RS_expected;
	LCD_RW_expected_prev = LCD_RW_expected;
end



// expected LCD_DATA[0]
initial
begin
	LCD_DATA_expected[0] = 1'bX;
end 

// expected LCD_DATA[1]
initial
begin
	LCD_DATA_expected[1] = 1'bX;
end 

// expected LCD_DATA[2]
initial
begin
	LCD_DATA_expected[2] = 1'bX;
end 

// expected LCD_DATA[3]
initial
begin
	LCD_DATA_expected[3] = 1'bX;
end 

// expected LCD_DATA[4]
initial
begin
	LCD_DATA_expected[4] = 1'bX;
end 

// expected LCD_DATA[5]
initial
begin
	LCD_DATA_expected[5] = 1'bX;
end 

// expected LCD_DATA[6]
initial
begin
	LCD_DATA_expected[6] = 1'bX;
end 

// expected LCD_DATA[7]
initial
begin
	LCD_DATA_expected[7] = 1'bX;
end 

// expected LCD_EN
initial
begin
	LCD_EN_expected = 1'bX;
end 

// expected LCD_ON
initial
begin
	LCD_ON_expected = 1'bX;
end 

// expected LCD_RS
initial
begin
	LCD_RS_expected = 1'bX;
end 

// expected LCD_RW
initial
begin
	LCD_RW_expected = 1'bX;
end 
// generate trigger
always @(AUD_ADCLRCK_expected or AUD_ADCLRCK or AUD_BCLK_expected or AUD_BCLK or AUD_DACDAT_expected or AUD_DACDAT or AUD_DACLRCK_expected or AUD_DACLRCK or AUD_XCK_expected or AUD_XCK or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or I2C_SCLK_expected or I2C_SCLK or I2C_SDAT_expected or I2C_SDAT or LCD_DATA_expected or LCD_DATA or LCD_EN_expected or LCD_EN or LCD_ON_expected or LCD_ON or LCD_RS_expected or LCD_RS or LCD_RW_expected or LCD_RW or LEDG_expected or LEDG or LEDR_expected or LEDR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AUD_ADCLRCK = %b | expected AUD_BCLK = %b | expected AUD_DACDAT = %b | expected AUD_DACLRCK = %b | expected AUD_XCK = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected I2C_SCLK = %b | expected I2C_SDAT = %b | expected LCD_DATA = %b | expected LCD_EN = %b | expected LCD_ON = %b | expected LCD_RS = %b | expected LCD_RW = %b | expected LEDG = %b | expected LEDR = %b | ",AUD_ADCLRCK_expected_prev,AUD_BCLK_expected_prev,AUD_DACDAT_expected_prev,AUD_DACLRCK_expected_prev,AUD_XCK_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,I2C_SCLK_expected_prev,I2C_SDAT_expected_prev,LCD_DATA_expected_prev,LCD_EN_expected_prev,LCD_ON_expected_prev,LCD_RS_expected_prev,LCD_RW_expected_prev,LEDG_expected_prev,LEDR_expected_prev);
	$display("| real AUD_ADCLRCK = %b | real AUD_BCLK = %b | real AUD_DACDAT = %b | real AUD_DACLRCK = %b | real AUD_XCK = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real I2C_SCLK = %b | real I2C_SDAT = %b | real LCD_DATA = %b | real LCD_EN = %b | real LCD_ON = %b | real LCD_RS = %b | real LCD_RW = %b | real LEDG = %b | real LEDR = %b | ",AUD_ADCLRCK_prev,AUD_BCLK_prev,AUD_DACDAT_prev,AUD_DACLRCK_prev,AUD_XCK_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,I2C_SCLK_prev,I2C_SDAT_prev,LCD_DATA_prev,LCD_EN_prev,LCD_ON_prev,LCD_RS_prev,LCD_RW_prev,LEDG_prev,LEDR_prev);
`endif
	if (
		( LCD_DATA_expected_prev[0] !== 1'bx ) && ( LCD_DATA_prev[0] !== LCD_DATA_expected_prev[0] )
		&& ((LCD_DATA_expected_prev[0] !== last_LCD_DATA_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LCD_DATA_exp[0] = LCD_DATA_expected_prev[0];
	end
	if (
		( LCD_DATA_expected_prev[1] !== 1'bx ) && ( LCD_DATA_prev[1] !== LCD_DATA_expected_prev[1] )
		&& ((LCD_DATA_expected_prev[1] !== last_LCD_DATA_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LCD_DATA_exp[1] = LCD_DATA_expected_prev[1];
	end
	if (
		( LCD_DATA_expected_prev[2] !== 1'bx ) && ( LCD_DATA_prev[2] !== LCD_DATA_expected_prev[2] )
		&& ((LCD_DATA_expected_prev[2] !== last_LCD_DATA_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LCD_DATA_exp[2] = LCD_DATA_expected_prev[2];
	end
	if (
		( LCD_DATA_expected_prev[3] !== 1'bx ) && ( LCD_DATA_prev[3] !== LCD_DATA_expected_prev[3] )
		&& ((LCD_DATA_expected_prev[3] !== last_LCD_DATA_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LCD_DATA_exp[3] = LCD_DATA_expected_prev[3];
	end
	if (
		( LCD_DATA_expected_prev[4] !== 1'bx ) && ( LCD_DATA_prev[4] !== LCD_DATA_expected_prev[4] )
		&& ((LCD_DATA_expected_prev[4] !== last_LCD_DATA_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LCD_DATA_exp[4] = LCD_DATA_expected_prev[4];
	end
	if (
		( LCD_DATA_expected_prev[5] !== 1'bx ) && ( LCD_DATA_prev[5] !== LCD_DATA_expected_prev[5] )
		&& ((LCD_DATA_expected_prev[5] !== last_LCD_DATA_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LCD_DATA_exp[5] = LCD_DATA_expected_prev[5];
	end
	if (
		( LCD_DATA_expected_prev[6] !== 1'bx ) && ( LCD_DATA_prev[6] !== LCD_DATA_expected_prev[6] )
		&& ((LCD_DATA_expected_prev[6] !== last_LCD_DATA_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LCD_DATA_exp[6] = LCD_DATA_expected_prev[6];
	end
	if (
		( LCD_DATA_expected_prev[7] !== 1'bx ) && ( LCD_DATA_prev[7] !== LCD_DATA_expected_prev[7] )
		&& ((LCD_DATA_expected_prev[7] !== last_LCD_DATA_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LCD_DATA_exp[7] = LCD_DATA_expected_prev[7];
	end
	if (
		( LCD_EN_expected_prev !== 1'bx ) && ( LCD_EN_prev !== LCD_EN_expected_prev )
		&& ((LCD_EN_expected_prev !== last_LCD_EN_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_EN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_EN_expected_prev);
		$display ("     Real value = %b", LCD_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_LCD_EN_exp = LCD_EN_expected_prev;
	end
	if (
		( LCD_ON_expected_prev !== 1'bx ) && ( LCD_ON_prev !== LCD_ON_expected_prev )
		&& ((LCD_ON_expected_prev !== last_LCD_ON_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_ON :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_ON_expected_prev);
		$display ("     Real value = %b", LCD_ON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LCD_ON_exp = LCD_ON_expected_prev;
	end
	if (
		( LCD_RS_expected_prev !== 1'bx ) && ( LCD_RS_prev !== LCD_RS_expected_prev )
		&& ((LCD_RS_expected_prev !== last_LCD_RS_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_RS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_RS_expected_prev);
		$display ("     Real value = %b", LCD_RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_LCD_RS_exp = LCD_RS_expected_prev;
	end
	if (
		( LCD_RW_expected_prev !== 1'bx ) && ( LCD_RW_prev !== LCD_RW_expected_prev )
		&& ((LCD_RW_expected_prev !== last_LCD_RW_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_RW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_RW_expected_prev);
		$display ("     Real value = %b", LCD_RW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_LCD_RW_exp = LCD_RW_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Master_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUD_ADCDAT;
reg treg_AUD_ADCLRCK;
reg treg_AUD_BCLK;
reg treg_AUD_DACLRCK;
reg CLK_50MHz;
reg treg_I2C_SDAT;
reg [2:0] KEY;
reg PS2_CLK;
reg PS2_DAT;
reg [17:0] SW;
reg TD_CLK27;
reg resetn;
// wires                                               
wire AUD_ADCLRCK;
wire AUD_BCLK;
wire AUD_DACDAT;
wire AUD_DACLRCK;
wire AUD_XCK;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire I2C_SCLK;
wire I2C_SDAT;
wire [7:0] LCD_DATA;
wire LCD_EN;
wire LCD_ON;
wire LCD_RS;
wire LCD_RW;
wire [8:0] LEDG;
wire [17:0] LEDR;

wire sampler;                             

// assign statements (if any)                          
assign AUD_ADCLRCK = treg_AUD_ADCLRCK;
assign AUD_BCLK = treg_AUD_BCLK;
assign AUD_DACLRCK = treg_AUD_DACLRCK;
assign I2C_SDAT = treg_I2C_SDAT;
Master i1 (
// port map - connection between master ports and signals/registers   
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.CLK_50MHz(CLK_50MHz),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.I2C_SCLK(I2C_SCLK),
	.I2C_SDAT(I2C_SDAT),
	.KEY(KEY),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.PS2_CLK(PS2_CLK),
	.PS2_DAT(PS2_DAT),
	.SW(SW),
	.TD_CLK27(TD_CLK27),
	.resetn(resetn)
);

// resetn
initial
begin
	resetn = 1'b1;
	resetn = #20000 1'b0;
end 

// CLK_50MHz
initial
begin
	CLK_50MHz = 1'b0;
	CLK_50MHz = #15000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #30000 1'b0;
	CLK_50MHz = #20000 1'b1;
	CLK_50MHz = #25000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #10000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #30000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #15000 1'b1;
	CLK_50MHz = #10000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #20000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #25000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #10000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #25000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #15000 1'b1;
	CLK_50MHz = #20000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #15000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #10000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #10000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #10000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #15000 1'b0;
	CLK_50MHz = #20000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #10000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #25000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #15000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #15000 1'b0;
	CLK_50MHz = #25000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #25000 1'b1;
	CLK_50MHz = #25000 1'b0;
	CLK_50MHz = #25000 1'b1;
	CLK_50MHz = #20000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #35000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #10000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #15000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #10000 1'b1;
	CLK_50MHz = #25000 1'b0;
	CLK_50MHz = #5000 1'b1;
	CLK_50MHz = #5000 1'b0;
	CLK_50MHz = #15000 1'b1;
end 

// PS2_DAT
initial
begin
	PS2_DAT = 1'b0;
	PS2_DAT = #15000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #30000 1'b0;
	PS2_DAT = #20000 1'b1;
	PS2_DAT = #25000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #10000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #30000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #15000 1'b1;
	PS2_DAT = #10000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #20000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #25000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #10000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #25000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #15000 1'b1;
	PS2_DAT = #20000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #15000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #10000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #10000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #10000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #15000 1'b0;
	PS2_DAT = #20000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #10000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #25000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #15000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #15000 1'b0;
	PS2_DAT = #25000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #25000 1'b1;
	PS2_DAT = #25000 1'b0;
	PS2_DAT = #25000 1'b1;
	PS2_DAT = #20000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #35000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #10000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #15000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #10000 1'b1;
	PS2_DAT = #25000 1'b0;
	PS2_DAT = #5000 1'b1;
	PS2_DAT = #5000 1'b0;
	PS2_DAT = #15000 1'b1;
end 

Master_vlg_sample_tst tb_sample (
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACLRCK(AUD_DACLRCK),
	.CLK_50MHz(CLK_50MHz),
	.I2C_SDAT(I2C_SDAT),
	.KEY(KEY),
	.PS2_CLK(PS2_CLK),
	.PS2_DAT(PS2_DAT),
	.SW(SW),
	.TD_CLK27(TD_CLK27),
	.resetn(resetn),
	.sampler_tx(sampler)
);

Master_vlg_check_tst tb_out(
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.I2C_SCLK(I2C_SCLK),
	.I2C_SDAT(I2C_SDAT),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.sampler_rx(sampler)
);
endmodule

